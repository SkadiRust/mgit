use assert_cmd::prelude::*;
use std::env;
use std::path::PathBuf;
use std::process::Command;

/// cmd: 'mgit init ./target/tmp/test_init_simple --init'
/// repos tree:
///   test_snapshot_init
///     ├─imgui-rs (.git)
///     ├─indicatif (.git)
///     ├─git-workspace (.git)
///     └─git-repo-manager (.git)
#[test]
fn cli_init_simple() {
    let path = env::current_dir()
        .unwrap()
        .join("target/tmp/test_init_simple");

    create_repos_tree1(&path);

    let input_path = path.clone().into_os_string().into_string().unwrap();
    // execute cli init function with path
    execute_cargo_cmd("mgit", &["init", &input_path]);

    // get content from .gitrepos
    let real_result = std::fs::read_to_string(input_path + "/.gitrepos").unwrap();
    let expect_result = r#"
# This file is automatically @generated by mgit.
# Editing it as you wish.
default-branch = "develop"

[[repos]]
local = "foobar-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-3"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-4"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
"#;

    assert_eq!(real_result.trim(), expect_result.trim());

    // clean-up
    std::fs::remove_dir_all(&path).unwrap();
}

/// cmd: 'mgit init ./target/tmp/test_init_force1 --force'
/// repos tree:
///   test_snapshot_init_force1 (.git)
///     ├─imgui-rs (.git)
///     ├─indicatif (.git)
///     ├─git-workspace (.git)
///     └─git-repo-manager (.git)
#[test]
fn cli_init_force1() {
    let path = env::current_dir()
        .unwrap()
        .join("target/tmp/test_init_force1");

    create_repos_tree2(&path);

    let input_path = path.clone().into_os_string().into_string().unwrap();
    // execute cli init function with path
    execute_cargo_cmd("mgit", &["init", &input_path, "--force"]);

    // get content from .gitrepos
    let real_result = std::fs::read_to_string(input_path + "/.gitrepos").unwrap();
    let expect_result = r#"
# This file is automatically @generated by mgit.
# Editing it as you wish.
default-branch = "develop"

[[repos]]
local = "."
remote = "https://github.com/rust-lang/git2-rs.git"

[[repos]]
local = "foobar-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-3"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-4"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
"#;

    assert_eq!(real_result.trim(), expect_result.trim());

    // clean-up
    std::fs::remove_dir_all(&path).unwrap();
}

/// cmd: 'mgit init ./target/tmp/cli_init_force2 --force'
/// repos tree:
///   test_snapshot_init_force2 (.git)
///     ├─imgui-rs (.git)
///     │  ├──imgui-rs (.git)
///     │  └──indicatif (.git)
///     ├─indicatif (.git)
///     │  ├──imgui-rs (.git)
///     │  └──indicatif (.git)
///     ├─git-workspace (.git)
///     │  ├──imgui-rs (.git)
///     │  └──indicatif (.git)
///     └─git-repo-manager (.git)
///        ├──imgui-rs (.git)
///        └──indicatif (.git)
#[test]
fn cli_init_force2() {
    let path = env::current_dir()
        .unwrap()
        .join("target/tmp/cli_init_force2");
    std::fs::create_dir_all(path.clone()).unwrap();

    create_repos_tree3(&path);

    let input_path = path.clone().into_os_string().into_string().unwrap();
    // execute cli init function with path
    execute_cargo_cmd("mgit", &["init", &input_path, "--force"]);

    // get content from .gitrepos
    let real_result = std::fs::read_to_string(input_path + "/.gitrepos").unwrap();
    let expect_result = r#"
# This file is automatically @generated by mgit.
# Editing it as you wish.
default-branch = "develop"

[[repos]]
local = "."
remote = "https://github.com/rust-lang/git2-rs.git"

[[repos]]
local = "foobar-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-1/foobar-1-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-1/foobar-1-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-2/foobar-2-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-2/foobar-2-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-3"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-3/foobar-3-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-3/foobar-3-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-4"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-4/foobar-4-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-4/foobar-4-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
"#;

    assert_eq!(real_result.trim(), expect_result.trim());

    // clean-up
    std::fs::remove_dir_all(&path).unwrap();
}

/// cmd: 'mgit snapshot ./target/tmp/test_snapshot_simple'
/// repos tress is same as `cli_init_simple()`
#[test]
fn cli_snapshot_simple() {
    let path = env::current_dir()
        .unwrap()
        .join("target/tmp/test_snapshot_simple");

    create_repos_tree1(&path);

    let input_path = path.clone().into_os_string().into_string().unwrap();
    // execute cli init function with path
    execute_cargo_cmd("mgit", &["snapshot", &input_path]);

    // get content from .gitrepos
    let real_result = std::fs::read_to_string(input_path + "/.gitrepos").unwrap();
    let expect_result = r#"
# This file is automatically @generated by mgit.
# Editing it as you wish.
default-branch = "develop"

[[repos]]
local = "foobar-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "e17e980a3fe939e677388f9fca5b3a6053d4fa4d"

[[repos]]
local = "foobar-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "e17e980a3fe939e677388f9fca5b3a6053d4fa4d"

[[repos]]
local = "foobar-3"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "e17e980a3fe939e677388f9fca5b3a6053d4fa4d"

[[repos]]
local = "foobar-4"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "e17e980a3fe939e677388f9fca5b3a6053d4fa4d"
"#;

    assert_eq!(real_result.trim(), expect_result.trim());

    // clean-up
    std::fs::remove_dir_all(&path).unwrap();
}

/// cmd: 'mgit snapshot ./target/tmp/cli_snapshot_branch --branch'
/// repos tress is same as `cli_init_simple()`
#[test]
fn cli_snapshot_branch() {
    let path = env::current_dir()
        .unwrap()
        .join("target/tmp/test_snapshot_branch");

    create_repos_tree1(&path);

    let input_path = path.clone().into_os_string().into_string().unwrap();
    // execute cli init function with path
    execute_cargo_cmd("mgit", &["snapshot", &input_path, "--branch"]);

    // get content from .gitrepos
    let real_result = std::fs::read_to_string(input_path + "/.gitrepos").unwrap();
    let expect_result = r#"
# This file is automatically @generated by mgit.
# Editing it as you wish.
default-branch = "develop"

[[repos]]
local = "foobar-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-3"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"

[[repos]]
local = "foobar-4"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
"#;

    assert_eq!(real_result.trim(), expect_result.trim());

    // clean-up
    std::fs::remove_dir_all(&path).unwrap();
}

/// cmd: 'mgit snapshot ./target/tmp/test_snapshot_force --init --force --config ./target/tmp/test_snapshot_force/.gitrepos'
/// repos tress is same as `cli_init_force2()`
#[test]
fn cli_snapshot_force() {
    let path = env::current_dir()
        .unwrap()
        .join("target/tmp/test_snapshot_force");
    std::fs::create_dir_all(path.clone()).unwrap();

    create_repos_tree3(&path);

    let input_path = path.clone().into_os_string().into_string().unwrap();
    let config_file = input_path.clone() + "/.gitrepos";
    // execute cli init function with path
    execute_cargo_cmd(
        "mgit",
        &["snapshot", &input_path, "--force", "--config", &config_file],
    );

    // get content from .gitrepos
    let real_result = std::fs::read_to_string(config_file).unwrap();
    let expect_result = r#"
# This file is automatically @generated by mgit.
# Editing it as you wish.
default-branch = "develop"

[[repos]]
local = "."
remote = "https://github.com/rust-lang/git2-rs.git"
commit = "ca6b3346d2e50e79d7c160cbee82ee65e2bcd701"

[[repos]]
local = "foobar-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "e17e980a3fe939e677388f9fca5b3a6053d4fa4d"

[[repos]]
local = "foobar-1/foobar-1-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "06fef09e5626aad3ef4c0058bd8286bfe409982a"

[[repos]]
local = "foobar-1/foobar-1-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "06fef09e5626aad3ef4c0058bd8286bfe409982a"

[[repos]]
local = "foobar-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "e17e980a3fe939e677388f9fca5b3a6053d4fa4d"

[[repos]]
local = "foobar-2/foobar-2-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "06fef09e5626aad3ef4c0058bd8286bfe409982a"

[[repos]]
local = "foobar-2/foobar-2-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "06fef09e5626aad3ef4c0058bd8286bfe409982a"

[[repos]]
local = "foobar-3"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "e17e980a3fe939e677388f9fca5b3a6053d4fa4d"

[[repos]]
local = "foobar-3/foobar-3-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "06fef09e5626aad3ef4c0058bd8286bfe409982a"

[[repos]]
local = "foobar-3/foobar-3-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "06fef09e5626aad3ef4c0058bd8286bfe409982a"

[[repos]]
local = "foobar-4"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "e17e980a3fe939e677388f9fca5b3a6053d4fa4d"

[[repos]]
local = "foobar-4/foobar-4-1"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "06fef09e5626aad3ef4c0058bd8286bfe409982a"

[[repos]]
local = "foobar-4/foobar-4-2"
remote = "https://github.com/emk/heroku-rust-cargo-hello.git"
commit = "06fef09e5626aad3ef4c0058bd8286bfe409982a"
"#;

    assert_eq!(real_result.trim(), expect_result.trim());

    // clean-up
    std::fs::remove_dir_all(&path).unwrap();
}

pub fn execute_cmd(path: &PathBuf, cmd: &str, args: &[&str]) {
    std::process::Command::new(cmd)
        .current_dir(path.to_path_buf())
        .args(args)
        .output()
        .ok();
}

pub fn execute_cargo_cmd(cmd: &str, args: &[&str]) {
    Command::cargo_bin(cmd)
        .unwrap()
        .args(args)
        .assert()
        .success();
}

pub fn create_repos_tree1(path: &PathBuf) {
    if path.exists() {
        std::fs::remove_dir_all(path).unwrap();
    }
    std::fs::create_dir_all(path.clone()).unwrap();

    let remote = "https://github.com/emk/heroku-rust-cargo-hello.git";

    let repo_names = vec!["foobar-1", "foobar-2", "foobar-3", "foobar-4"];

    for idx in 0..repo_names.len() {
        let dir = path.join(repo_names[idx]);
        std::fs::create_dir_all(dir.to_path_buf()).unwrap();

        // create local git repositoris
        execute_cmd(&dir, "git", &["init"]);

        // add remote
        execute_cmd(&dir, "git", &["remote", "add", "origin", remote]);

        std::fs::write(
            dir.join(".git/refs/heads/master"),
            "e17e980a3fe939e677388f9fca5b3a6053d4fa4d",
        )
        .unwrap();
    }
}

pub fn create_repos_tree2(path: &PathBuf) {
    create_repos_tree1(path);

    // set root git init
    execute_cmd(path, "git", &["init"]);
    let root_remote = "https://github.com/rust-lang/git2-rs.git";
    execute_cmd(path, "git", &["remote", "add", "origin", root_remote]);

    std::fs::write(
        path.join(".git/refs/heads/master"),
        "ca6b3346d2e50e79d7c160cbee82ee65e2bcd701",
    )
    .unwrap();
}

pub fn create_repos_tree3(path: &PathBuf) {
    // set root git init
    create_repos_tree2(path);

    let remote = "https://github.com/emk/heroku-rust-cargo-hello.git";

    // get all dir
    for it in std::fs::read_dir(path).unwrap() {
        let dir_entry = match it {
            Ok(dir) => dir,
            Err(e) => {
                println!("{}", e);
                continue;
            }
        };
        let entry_path = &dir_entry.path();
        let entry_name = &entry_path
            .file_name()
            .unwrap()
            .to_str()
            .unwrap()
            .to_string();

        // init repo randomly
        for idx in 1..3 {
            let repo_name = entry_name.clone() + "-" + &idx.to_string();
            let dir = entry_path.join(&repo_name);

            std::fs::create_dir_all(dir.to_path_buf()).unwrap();
            // create local git repositoris
            execute_cmd(&dir, "git", &["init"]);

            // add remote
            execute_cmd(&dir, "git", &["remote", "add", "origin", remote]);

            std::fs::write(
                dir.join(".git/refs/heads/master"),
                "06fef09e5626aad3ef4c0058bd8286bfe409982a",
            )
            .unwrap();
        }
    }
}
